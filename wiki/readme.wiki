#summary The MAGPIE readme file
#labels Featured


= magpieinstructions.txt =

M.A.G.P.I.E. 

Model Advice Guidance Process Integration Explorer


NEW FOR ITERATION 2:

DEPENDENCIES:

The pydot module for Python is required for graphing PML processes. This is a 
wrapper for Graphviz. It has been confirmed to be available from the package 
manager repos for a variety of Linux distros including Ubuntu, Mint, Fedora and
Arch. Installation of pydot from OS repos will also install Graphviz. If it is 
not available in your distro, or your distro's version is out of date, the 
latest version can be acquired from -

http://code.google.com/p/pydot/

In case of manual install, it will be necessary for the administrator to ensure
that all dependencies, including but not limited to Graphviz, are installed.
The documentation for pydot should be consulted.

The PML tools, particularly traverse, are also required. If installing from the
repo, it is necessary to cd to the pml folder of the trunk, and run make.

FILE SERVING:

The application now allows "Resource Files" to be uploaded to the web server.
By default, these files are located in the 'resources' folder, which is located
in the root folder alongside the django_magpie, docs and sqlite3 folder.
Django handles the uploading of these files, but does not serve them, this is
the task of the web server. For testing purposes, it is recommended that the
inbuilt Python HTTP server is used. To do so, from the django_magpie folder -

cd ../resources
python -m SimpleHTTPServer 8888

The settings.py file is configured such that MEDIA_URL (i.e. the URL where the
files are accessed through) is http://127.0.0.1:8888/ Similarly, the MEDIA_ROOT
folder, where the files are uploaded to is defined as MAGPIE_DIR/../resources,
where MAGPIE_DIR is the location of the django_magpie folder. The admin may
modify these locations as necessary.

A resource file may have a set of user group associated with it. This is used
to limit the display of links to this file to those users who are in one of the
specified groups (see next section). However, at the minute, there is nothing
to prevent an authorized user accessing the file by hotlinking to it.

RECOMMENDATION LINKS:

In addition to text, recommendations may optionally have links associated with 
them. There are four types of link that can be associated with them -

* External Links - these are simple HTTP links to external sites.
* Internal Links - these are links to Resource Files stored locally. The 
  maintainer selects from the list of uploaded files.
* PML Link - A special case of internal link, it is used for creating graphs.
* Video Link - Will be used for embedded video players in future versions.

GRAPHING:

If a PML file is associated with the recommendation, then the program will
attempt to render a graph using pml-to-dot converter provided (traverse)
and then use graphviz to produce a PNG representation of the graph. 
This is then displayed on the page alongside recommendations. There are two
issues with the current implementation -

* If an unsuitable file is set as the PML description file, it will fail to 
  produce a graph. This does not cause any problems as per se, but it may be
  desirable in future versions to carry out a check (using pmlcheck) on the
  file set as the PML file when the user is creating the recommendation.
* The code that generates the graph executes the traverse program with the 
  file name, given through a GET request, as an argument. This poses some
  unpleasant security issues, and will need to be mitigated in future, either
  by changing the data passed in the GET request, or calling the traverse
  program's functions through Python using SWIG or the like.

---END ITERATION 2---

== 0. Initialization ==

On the first run of the application, it is necessary to cd to the django_magpie directory, and run -

python manage.py syncdb

This will set up the database, and will create a superuser account. Once this is
done, the server can be started with -

python manage.py runserver

Assuming the server is running the default address, the admin page can be 
accessed at:

http://127.0.0.1:8000/admin

Log in with the username/password that was specified when the database was set
up (default is admin/admin). The admin page allows the maintainer to add/remove/modify items the the 4 areas desribed below.

== 1. Overview ==

Before explaining use of the program, it is probably best to consider how the 
program works (from the admin user's perspective) -

The program consists of 4 areas: 

  * Knowledge - Consists of variables,ruleset's and recommendations and resources
  * Register  - Hold info about user account and their profiles.
  * Auth      - django own authentication system 
  * Sites     - djangos default site name

Note that the django install creates the auth and sites automatically.
We associate magpie accounts with django users. This allows us to reuse the django authentication systems while at the same time store magpie specific user data in a separate place. 

In django this is known as user profiles (AUTH_PROFILE_MODULE) where you can essentially extend or subclass the django authentication user objects and add your own application specific data. 

Unfortunately due to features planning list user profiles is taken to mean user types rather than than user specific data so to save time we named our django authentication user profiles 'accounts' although this may confuse django developers where user profiles are taken to mean an extension of django authentication users - sigh.

== 2. Knowledge ==


The knowledge base consists of Variables, Rulesets, Recommendations and Resources.
A variable is named item representing a set of values. When a variable is assigned a value it becomes a fact in magpies inference engine. Currently we only support boolean variables consisting of the set True/False.
  
The ask flag controls whether magpie can query the user for the value of this variable. The ask prompt is question that will be presented to the user.

Ruleset's are a collection of rules relating to some specific area e.g food_rules or business_rules. A rule is modelled on very simple IF/THEN logic along the lines of:
IF premise  THEN conclusions, recommendations

When creating a rule you first define its:
 # premise  - a list of variables with assigned values (the facts.
 # conclusions -  a list of variable to be inferred to be true 
 # recommendations - a list of recommendations to be added (along with a ranking)

Recommendation's are simply named suggestions which can either be simple text, pml links, video objects.  Resources are physical objects store outside the system such as video files,pictures and pml models.


== 3. Register ==

The register consists of user profiles and accounts.

A user profile is named user type that which can be associated with any of the defined ruleset's. In addition a list of facts (assigned variable) can be added to the profile which will be automatically asserted as true for anyone using that profile.

An account is created anytime a user registers themselves with the system. A user can choose their own profile which in turn will select both the ruleset that will be used and a set of predefined facts during a question and answer session.

Note that for users who have no logged we use the guest user profile which is defined by the variable GUEST_PROFILE in settings.py (currently set to the name 'guest').


== 4. Engine ===

To understand how all of the above is used a brief overview of how the magpies inference engine works may help.

At the start the engine is given a list of asserted facts loaded from a user profile. It then iterates over all the rules in a ruleset associated with the user profile checking for rules that have fired (all their premises are true). If the premise of a rule is found to be true is said to fire and and all of its consequence's are added the list of known facts and the list recommendations are also updated.This process repeats until no more new facts can be inferred. This is what's known as forward chaining. 

Next the engine looks at the the list of rules not yet fired and checks to see if any of the premises can be checked with the user (the variables have the ask flag set to true). If so it will issue a list of questions for those premises to the user. The list of answers given by the user will then be added to the list of already known facts and the cycle of forward chaining will be repeated all over again. This will continue until no more new facts can be ascertained either by inference or by querying the user.


== 5. Other ==

USER ACCESS LEVELS:

The system currently supports three levels of privilege -

* Guest: A user that is not registered on the system is allowed to answer the 
  questions, but cannot access the admin screen.
* Superuser: The user created when the database was initialized is given full 
  control over the system, including the ability to create other superusers.
* Maintainer: This is not directly built in to the system but can be created in
  a straightforward manner. Log in to the admin screen as a superuser, select
  the Groups section, and create a group named that has all the privileges
  prefixed with 'knowledge'. When creating a maintainer user, ensure that they
  are a member of this group, and that the "Staff Status" option is selected. 
  This user will be allowed to modify the knowledge base, but otherwise has no
  administration powers.

It is anticipated that the Maintainer group setup will be automated, either by
using database fixtures, or by distributing the software with a template 
database file.

ANSWERING QUESTIONS:

At the beginning, the user is presented with the questions associated with rule premise that the magpie inference engine is trying to establish are true.The user can select Yes, No, or not select an answer. When the user presses "Submit", the program processes the answers, and delivers -

* More questions, if answers on the previous screens have asserted facts which
  fill the requirements for other facts. If there are no applicable questions,
  it will inform the user of this fact instead.

* A list of recommendations (if any), along with a listing of reasons why this
  recommendation was made (questions and the user's answers)

The user can click the "Home" button near the top of the screen to go back to
the start.

UNIT TESTS:

To run all tests do

  ./manage.py test

To run specific tests for the knowledge module do

  ./manage.py test knowledge 